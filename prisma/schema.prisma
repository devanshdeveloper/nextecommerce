generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model User {
    id              String     @id @default(uuid())
    name            String
    email           String?    @unique
    emailVerified   DateTime?  @map("email_verified")
    image           String?
    cart            CartItem[]
    shippingAddress String?
    phoneNumber     Int?
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    accounts        Account[]
    sessions        Session[]
    Order           Order[]

    @@map("users")
}

model CartItem {
    id        String   @id @default(cuid())
    productId String
    quantity  Int      @default(1)
    User      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order?   @relation(fields: [orderId], references: [id])
    orderId   String?
}

model Order {
    id                  String     @id @default(cuid())
    User                User?      @relation(fields: [userId], references: [id])
    userId              String?
    products            CartItem[]
    payment_status      String?
    shipping_status     String?
    amount              Int
    razorpay_order_id   String
    razorpay_payment_id String
    razorpay_signature  String
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String?
    provider          String
    providerAccountId String   @map("provider_account_id")
    token_type        String?
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    scope             String?
    id_token          String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token")
    accessToken  String?  @map("access_token")
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
